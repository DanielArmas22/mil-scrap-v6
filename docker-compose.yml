services:
  # Servicio de Chrome sin cabeza (Browserless)
  chrome:
    image: browserless/chrome:latest
    restart: unless-stopped
    ports:
      - "3002:3000" # Puerto para acceder a la interfaz de depuración
    environment:
      # Configuración de Browserless
      - MAX_CONCURRENT_SESSIONS=10
      - CONNECTION_TIMEOUT=300000
      - MAX_QUEUE_LENGTH=20
      - PREBOOT_CHROME=true
      - ENABLE_DEBUGGER=true # Cambiado a true para habilitar el depurador
      - WORKSPACE_DELETE_EXPIRED=true
      - WORKSPACE_EXPIRE_DAYS=7
      - ENABLE_CORS=true
      - DEBUG=browserless*,puppeteer:* # Añadido para habilitar logs de depuración detallados
      - FUNCTION_ENABLE_INCOGNITO_MODE=true # Opcional: permite sesiones de incógnito
      - TOKEN=S0G1V9NnysIfNo6b4594f2f03360c5cb9faececf54 # Puedes añadir un token para seguridad si lo deseas
    # Browserless ya incluye su propio SYS_ADMIN y configuración para Chrome
    shm_size: 2gb # Memoria compartida para Chrome
    mem_limit: 4g # Límite de memoria

  # Servicio de scraper
  scraper:
    build: .
    ports:
      - "3001:3000" # Expone la API en el puerto 3001
    environment:
      - PORT=3000 # Puerto interno donde escucha tu aplicación
      # URL de Browserless para conectarse (nombre del servicio + puerto interno)
      - BROWSERLESS_URL=ws://chrome:3000?token=S0G1V9NnysIfNo6b4594f2f03360c5cb9faececf54
    restart: unless-stopped
    # Esto permite a ambos contenedores encontrarse en la misma red
    depends_on:
      - chrome
    volumes:
      - ./:/app # Monta el directorio raíz del proyecto
      - /app/node_modules # Evita que node_modules local sobrescriba
      - ./logs:/app/logs # Para logs
